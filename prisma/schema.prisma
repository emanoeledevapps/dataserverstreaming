// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(cuid())
  name                String
  wallet              String   @unique
  password            String?
  userType            Int      @default(0)
  createdAt           DateTime @default(now())
  geoLocation         String?
  propertyGeolocation String?
  imgProfileUrl       String?
  address             String?
  level               Int      @default(0)
  onBlockchain        Boolean  @default(false)

  Delations     Delation[]
  Inspections   Inspection[]
  Notifications Notification[]
}

model Delation {
  id           String   @id @default(cuid())
  title        String
  testimony    String
  proofPhoto   String
  reportedUser String
  createdAt    DateTime @default(now())

  user User @relation(fields: [reportedUser], references: [wallet])
}

model Inspection {
  id                String   @id @default(cuid())
  inspectionId      String   @unique
  createdBy         String
  createdAt         String
  acceptedAt        DateTime @default(now())
  status            Int      @default(1)
  inspectedAt       String?
  propertyData      String
  resultCategories  String?
  userWallet        String
  currentLocation   String?
  resultIdices      String?
  proofPhoto        String?
  biodversityIndice String?
  methodType        String?
  zones             String?

  user User @relation(fields: [userWallet], references: [wallet])
}

model Post {
  id          String   @id @default(cuid())
  url         String?
  title       String
  description String
  keywords    String   @default("")
  bannerUrl   String
  bannerAlt   String
  bodyPost    String
  language    String
  createdAt   DateTime @default(now())
}

model Category {
  id          String        @id @default(cuid())
  title       String        @unique
  description String
  createdAt   DateTime      @default(now())
  SubCategory SubCategory[]
}

model SubCategory {
  id             String   @id @default(cuid())
  title          String
  category       String
  carbonValue    Decimal
  bioValue       Decimal
  aguaValue      Decimal
  soloValue      Decimal
  createdAt      DateTime @default(now())
  description    String?
  placeholder    String?
  type           String   @default("numeric")
  unity          String?
  order          Int?
  insumoCategory String?
  proofPhoto     Boolean  @default(false)

  cat Category @relation(fields: [category], references: [id])
}

model Impact {
  id     String @id @default(cuid())
  title  String
  carbon Int
  agua   Int
  bio    Int
  solo   Int
}

model TokensBurned {
  id              String   @id @default(cuid())
  wallet          String
  transactionHash String
  tokens          Float
  water           Float
  bio             Float
  soil            Float
  carbon          Float
  createdAt       DateTime @default(now())
}

model Feedback {
  id          Int      @id
  wallet      String
  title       String
  description String
  photoHash   String
  responsible String?
  createdAt   DateTime @default(now())
  status      Int      @default(0)
  type        String
  priority    Int?
  team        Int?

  CommentsFeedback CommentsFeedback[]
}

model CommentsFeedback {
  id           String   @id @default(cuid())
  walletAuthor String
  comment      String
  createdAt    DateTime @default(now())
  feedbackId   Int

  feedback Feedback @relation(fields: [feedbackId], references: [id])
}

model Notification {
  id         String   @id @default(cuid())
  from       String?
  for        String
  type       String
  data       String
  visualized Boolean  @default(false)
  createdAt  DateTime @default(now())

  user User @relation(fields: [for], references: [wallet])
}

model RequestFaucet {
  id        String   @id @default(cuid())
  wallet    String
  createdAt DateTime @default(now())
  status    Int      @default(0)
}

model Quote {
  id         String   @id @default(cuid())
  reservedBy String?
  createdAt  DateTime @default(now())
}

model RegistrationRequest {
  id        String   @id @default(cuid())
  name      String
  email     String
  tel       String
  question  String
  typeUser  String
  createdAt DateTime @default(now())
}
